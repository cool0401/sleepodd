@page "/my-podcast"
@using Microsoft.AspNetCore.Components.Forms
@attribute [Authorize]
@implements IDisposable
@inject IPodcastService PodcastService
@inject PersistentComponentState ApplicationState
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<div class="container mt-5">
    <h3 class="text-center mb-4">Create New Podcast</h3>

    <form class="needs-validation" @onsubmit="OnSubmit">
        <div class="mb-3">
            <label for="titleInput" class="form-label">Title</label>
            <input type="text" class="form-control" id="titleInput" @bind="title" required>
            <div class="invalid-feedback">
                Please provide a title.
            </div>
        </div>
        <div class="mb-3">
            <label for="descriptionInput" class="form-label">Description</label>
            <textarea class="form-control" id="descriptionInput" rows="3" @bind="description" required></textarea>
            <div class="invalid-feedback">
                Please provide a description.
            </div>
        </div>
        <div class="mb-3">
            <label for="categorySelect" class="form-label">Category</label>
            <select id="categorySelect" class="form-select" @bind="selectedCategoryId" required>
                <option value="" disabled>Select a category</option>
                @if (categories != null)
                {
                    @foreach (var category in categories)
                    {
                        <option value="@category.Id">@category.Genre</option>
                    }
                }
            </select>
            <div class="invalid-feedback">
                Please select a category.
            </div>
        </div>
        <div class="mb-3">
            <label for="iconInput" class="form-label">Icon</label>
            <InputFile id="iconInput" OnChange="HandleFileUpload" class="form-control-file"/>
            @if (!string.IsNullOrEmpty(PreviewUrl))
            {
                <img src="@PreviewUrl" alt="Image Preview" class="img-thumbnail mt-3" style="max-width: 300px;"/>
            }
        </div>
        <p class="text-danger text-center py-2">@errorMessage</p>
        <div class="d-grid">
            <button class="btn btn-primary" type="submit">Submit</button>
        </div>
    </form>
</div>

@code {
    private string? title;
    private string? description;
    private string? selectedCategoryId;
    private string PreviewUrl { get; set; }
    private string? errorMessage;

    private IBrowserFile? selectedFile;

    private IEnumerable<Category>? categories;

    private PersistingComponentStateSubscription _persistingSubscription;

    protected override async Task OnInitializedAsync()
    {
        _persistingSubscription = ApplicationState.RegisterOnPersisting(PersistCategories);

        if (!ApplicationState.TryTakeFromJson<IEnumerable<Category>>("categories", out var restored))
        {
            categories = await PodcastService.GetCategories();
        }
        else
        {
            categories = restored!;
        }

        if (categories.Count() > 0)
            selectedCategoryId = categories.First().Id.ToString();
    }

    private Task PersistCategories()
    {
        ApplicationState.PersistAsJson("categories", categories);
        return Task.CompletedTask;
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null)
        {
            // Generate preview URL
            using (var stream = selectedFile.OpenReadStream(maxAllowedSize: 104857600)) // 100 MB limit
            {
                var buffer = new byte[stream.Length];
                await stream.ReadAsync(buffer, 0, (int)stream.Length);
                PreviewUrl = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
            }
        }
    }

    private async Task OnSubmit()
    {
        if (string.IsNullOrEmpty(title) || string.IsNullOrEmpty(description))
        {
            errorMessage = "Title and description are required.";
            return;
        }

        if (selectedFile != null)
        {
            var content = new MultipartFormDataContent();
            var streamContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 104857600)); // 100 MB limit
            streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(streamContent, "file", selectedFile.Name);

            var response = await Http.PostAsync("files/uploadImage", content);
            if (response.IsSuccessStatusCode)
            {
                var image = await response.Content.ReadAsStringAsync();
                Console.WriteLine("File uploaded successfully!");
                
                var (result, message) = await PodcastService.CreateShow(title, description, image.Trim('"'), selectedCategoryId);

                if (result)
                {
                    Console.WriteLine(message);
                }
            }
            else
            {
                errorMessage = "Error occurred during the upload.";
            }
        }
    }

    public void Dispose()
    {
        _persistingSubscription.Dispose();
    }

}