@page "/settings"
@inject ThemeInterop ThemeInterop

<PageTitle>AISleepod Podcasts - Settings</PageTitle>

<div class="containerPage">
    <div class="titleWrapper content--header">
        <TitlePage Label="Settings" />
        <MainHeader />
    </div>

    <div class="contentWrapper">
        @if (isLoading)
        {
            <Spinner />
        }
        else
        {
            <SubtitlePage Label="Download settings" />
            <div class="settings-content">
                <ToggleSwitch Name="autodownload" Label="Autodownload using data"
                              Description="Turn on to allow downloads using cellular data if WiFi is unavailable." />

                <ToggleSwitch Name="deleteplayed" Label="Delete played stories"
                              Description="Turn on to delete stories after they've been played." />

                <ToggleSwitch Name="systemtheme" Label=@($"Use System Theme ({systemTheme})") Checked="@isSystemTheme"
                              Description="Turn on to follow the system theme."
                              OnChange="@OnUseSystemTheme" />

                <ToggleSwitch Name="darktheme" Label="Dark Theme" Checked="@isDarkMode"
                              Description="Turn on to use a dark theme (disabled when using system theme)." IsDisabled="@isSystemTheme"
                              OnChange="@OnDarkThemeChanged" />
            </div>
            <p class="settings-developed">Signup to listen to our stories <a href="https://" target="_blank">here</a> and to access all stories <a href="https://" target="_blank">become premium member</a></p>
        }
    </div>
</div>


@code {
    private bool isLoading = true;
    private bool isSystemTheme = false;
    private bool isDarkMode = false;

    private Theme desiredTheme;
    private Theme systemTheme;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            desiredTheme = await ThemeInterop.GetThemeAsync();
            systemTheme = await ThemeInterop.GetSystemThemeAsync();
            isDarkMode = desiredTheme is Theme.Dark;
            isLoading = false;
            ThemeInterop.SystemThemeChanged = async theme =>
            {
                systemTheme = theme;
                if (isSystemTheme)
                {
                    await OnDarkThemeChanged(systemTheme is Theme.Dark);
                }
                StateHasChanged();
            };
            await ThemeInterop.RegisterForSystemThemeChangedAsync();
            StateHasChanged();
        }
    }

    private async Task OnUseSystemTheme(bool value)
    {
        isSystemTheme = value;
        await ThemeInterop.SetThemeAsync(isSystemTheme ? systemTheme : desiredTheme);
    }

    private async Task OnDarkThemeChanged(bool value)
    {
        isDarkMode = value;
        await ThemeInterop.SetThemeAsync(isDarkMode ? Theme.Dark : Theme.Light);
    }
}
